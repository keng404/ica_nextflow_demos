params.input = null  
params.kraken2db = null  
params.busco_db_path = null  
params.minlength = 500  
params.phred = 33  
params.results = "${baseDir}/results/fastq_files"  
params.new_samplesheet = "${baseDir}/assets/sra_samples.csv"  
params.scaffolds_samplesheet = "${baseDir}/assets/scaffolds_list.csv"  
params.terra = false  
params.placeholder = "${baseDir}/assets/placeholder.txt"  
params.bbdukdb = "${baseDir}/assets/databases/phiX.fasta"  
params.zipped_sketch = "${baseDir}/assets/databases/REFSEQ_20220915_Bacteria_complete.msh.gz"  
params.amrfinder_db = "${baseDir}/assets/databases/amrfinderdb_v3.10_20220819.1.tar.gz"  
params.ncbi_assembly_stats = "${baseDir}/assets/databases/NCBI_Assembly_stats_20220928.txt"  
params.taxa = "${baseDir}/assets/databases/taxes_20220315.csv"  
params.ardb = "${baseDir}/assets/databases/ResGANNCBI_20220915_srst2.fasta"  
params.gamdbpf = "${baseDir}/assets/databases/PF-Replicons_20220916.fasta"  
params.hvgamdb = "${baseDir}/assets/databases/HyperVirulence_20220414.fasta"  
params.busco_config = "${baseDir}/conf/modules.config"  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = '25.MB'  
params.email = null  
params.email_on_fail = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'amrfinder_db,new_samplesheet,results,placeholder,zipped_sketch,terra,fasta,minlength,phred,ardb,hvgamdb,gamdbpf,taxa,ncbi_assembly_stats,refseq_fasta_database,bbdukdb,path2db,busco_config'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
process = [:]
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
