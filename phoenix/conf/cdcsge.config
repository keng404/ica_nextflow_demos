/*
========================================================================================
    Template config options for HPC compute environments
========================================================================================
*/

// This config is only for assigning the executor and queue for submitting jobs. Number of CPUs and memory for processes are controlled in the base.config file.
// After editing this config save it in the conf folder
// If you changed the name of this file then and then edit the file name in the line custom_HPC      { includeConfig 'conf/HPC_Template.config'      } in the nextflow.config file at https://github.com/DHQP/QuAISAR_Nextflow/blob/1744e80f6e7100af3b3d0da8efbc1fca24a8a280/nextflow.config#L138

profiles {
    cdcsge {

        process {
            executor        = 'sge'
            penv            = 'smp'
            submitRateLimit = '1sec'

            errorStrategy = { task.exitStatus in [250,245,140,143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries    = 2
            maxErrors     = '-1'

            // This will only effect processes that are labelled "process_low" change the queues in the other "withLabel" statements for each process type
            withLabel:process_low { 
                queue  = 'all.q' //Change to the queue of the cluster you want job submitted to 
                cpus   = { check_max( 2                  , 'cpus'    ) }
                memory = { check_max( 3.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 4.h                , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            //Change to the queue of the cluster you want jobs for processes that are labelled "process_medium" submitted to.
            withLabel:process_medium {
                queue  = 'all.q' 
                cpus   = { check_max( 4                   , 'cpus'    ) }
                memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 4.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            //If you have a high memory node change to the queue of the cluster you want jobs for processes that are labelled "process_high" submitted to.
            withLabel:process_high {
                queue  = 'all.q' 
                cpus   = { check_max( 6                   , 'cpus'    ) }
                memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            //If you have a node that is specific for jobs that take a while change to the queue of the cluster you want jobs for processes that are labelled "process_long" submitted to.
            withLabel:process_long {
                queue  = 'all.q'
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            //If you have a node that is specific for jobs that take a while change to the queue of the cluster you want jobs for processes that are labelled "process_short" submitted to.
            withLabel:process_short {
                queue  = 'short.q'
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:FASTP {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 5.GB  * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:FASTP_SINGLES {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:FASTQCTRIMD {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:BBDUK {
                queue = 'all.q'
                cpus   = { check_max( 4                   , 'cpus'    ) }
                memory = { check_max( 15.GB * task.attempt, 'memory'  ) } // minimum of 14GB required
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:BBMAP_REFORMAT {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 11.GB  * task.attempt, 'memory'  ) } // minimum of 11GB required
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:KRAKEN2_KRAKEN2 {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:SPADES {
                queue = 'all.q'
                cpus   = { check_max( 6                   , 'cpus'    ) }
                memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:RENAME_FASTA_HEADERS {
                queue = 'all.q'
                cpus   = { check_max( 2                   , 'cpus'    ) }
                memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:'SRST2_AR|SRST2_MLST' {
                queue  = 'all.q'
                cpus   = { check_max( 6                   , 'cpus'    ) }
                memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:PROKKA {
                queue  = 'all.q'
                cpus   = { check_max( 6                   , 'cpus'    ) }
                memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:AMRFINDERPLUS_RUN {
                queue  = 'all.q'
                cpus   = { check_max( 4                   , 'cpus'    ) }
                memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:BUSCO {
                queue  = 'all.q'
                cpus   = { check_max( 8                   , 'cpus'    ) }
                memory = { check_max( 75.GB * task.attempt, 'memory'  ) } // works for 90% retry got the rest.
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:'GAMMA|GAMMA_S' {
                queue  = 'all.q'
                cpus   = { check_max( 3                   , 'cpus'    ) }
                memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }

            withName:MULTIQC {
                queue  = 'all.q'
                cpus   = { check_max( 1                   , 'cpus'    ) }
                memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
                time   = { check_max( 8.h                 , 'time'    ) }
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
            }
        }
    }
}
