/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


///////////////////////////////////////
//
// workflow: phoenix
//
///////////////////////////////////////

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SRATOOLS_FASTERQDUMP {
        publishDir = [
            path: { "${params.outdir}/fastq_files" },
            mode: 'copy',
            pattern: '*.fastq.gz'
        ]
    }

    withName: SRA_SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: '*.csv'
        ]
    }

    withName: ASSET_CHECK {
       publishDir = [
           enabled: false,
           path: { "${params.outdir}" },
       ]
   }

    withName: BBDUK {
        ext.args = 'hdist=1 k=31'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/removedAdapters" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: FASTQCTRIMD {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastqc" },
            mode: 'copy',
            pattern: "*.{html,zip}"
        ]
    }

    withName: FASTP_TRIMD {
        ext.args = '-r --cut_right_window_size 20 --cut_right_mean_quality 30 -l 50 -g -5 20 -3 20'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*.{trim.fastq.gz,json,html}"
        ]
    }

    withName: FASTP_SINGLES {
        ext.args = '--disable_adapter_trimming'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*.{singles.fastq.gz,json,html}"
        ]
    }

    withName: GATHERING_READ_QC_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*{_trimmed_read_counts.txt,_raw_read_counts.txt}"
        ]
    }

    withName: SRST2_AR {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/srst2" },
            mode: 'copy',
            pattern: "*_fullgenes__ResGANNCBI_*_srst2__results.txt"
        ]
    }

    withName: GET_MLST_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_getMLST_out.txt,.fasta,_profiles.csv,_pull_dates.txt}"
        ]
    }

    withName: SRST2_MLST {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*_srst2.mlst"
        ]
    }

    withName: CHECK_MLST {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: CHECK_MLST_WITH_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: RENAME_FASTA_HEADERS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/Assembly" },
            mode: 'copy',
            pattern: "*.renamed.scaffolds.fa.gz"
        ]
    }

    withName: BBMAP_REFORMAT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/Assembly" },
            mode: 'copy',
            pattern: "*.{scaffolds.fa.gz,log}"
        ]
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/Annotation" },
            mode: 'copy',
            pattern: "*.{faa,gff,fna}"
        ]
    }

    withName: GET_TAXA_FOR_AMRFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/AMRFinder" },
            mode: 'copy',
            pattern: "*_AMRFinder_Organism.csv"
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/AMRFinder" },
            mode: 'copy',
            pattern: "*.{tsv}"
        ]
    }

    withName: GAMMA_HV {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_hv" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: GAMMA_AR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_ar" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: GAMMA_PF {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_pf" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/quast" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: MASH_DIST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI/mash_dist" },
            mode: 'copy',
            pattern: "*.txt"
        ]
    }

    withName: DETERMINE_TOP_TAXA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI/mash_dist" },
            mode: 'copy',
            pattern: "*_best_MASH_hits.txt"
        ]
    }

    withName: FASTANI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI" },
            mode: 'copy',
            pattern: "*.ani.txt"
        ]
    }

    withName: FORMAT_ANI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI/fastANI" },
            mode: 'copy',
            pattern: "*.fastANI.txt"
        ]
    }

    withName: DETERMINE_TAXA_ID {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.tax"
        ]
    }

    withName: MLST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: BUSCO {
        ext.args = '--mode genome'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/BUSCO" },
            mode: 'copy',
            pattern: "*.{txt,json,bam}"
        ]
    }

    withName: CALCULATE_ASSEMBLY_RATIO {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_Assembly_ratio_*.txt,_GC_content_*.txt}"
        ]
    }

    withName: CREATE_SUMMARY_LINE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*_summaryline.tsv"
        ]
    }

    withName: FETCH_FAILED_SUMMARIES {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: GATHER_SUMMARY_LINES {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "Phoenix_Output_Report.tsv"
        ]
    }

    withName: GRIPHIN {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "{GRiPHin_Report.xlsx,GRiPHin_samplesheet.csv}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

///////////////////////////////////////
//
// Subworkflow: spades
//
///////////////////////////////////////

process {

    withName: SPADES {
        errorStrategy = "ignore"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/Assembly" },
            mode: 'copy',
            pattern: "*.{scaffolds.fa.gz,contigs.fa.gz,transcripts.fa.gz,gene_clusters.fa.gz,assembly.gfa.gz,log}"
        ]
    }

    withName: DETERMINE_TAXA_ID_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.tax"
        ]
    }

    withName: CREATE_SUMMARY_LINE_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*_summaryline.tsv"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_FAILURE_EXQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

}

///////////////////////////////////////
//
// Subworkflow: kraken to krona
//
///////////////////////////////////////

process {

    withName: KRAKEN2_TRIMD {
        ext.args = '--use-names'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*{classified*,unclassified*,classifiedreads*,report.txt}"
        ]
    }

    withName: KRAKEN2_BH_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*_summary.txt"
        ]
    }

    withName: KREPORT2MPA_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*.mpa"
        ]
    }

    withName: KREPORT2KRONA_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }
        withName: KRAKEN2_ASMBLD {
        ext.args = '--use-names'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*{classified*,unclassified*,classifiedreads*,report.txt}"
        ]
    }

    withName: KREPORT2MPA_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*.mpa"
        ]
    }

    withName: KREPORT2KRONA_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRAKEN2_BH_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*_summary.txt"
        ]
    }

    withName: KRAKEN2_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*.classifiedreads.txt"
        ]
    }

    withName: KRAKENTOOLS_MAKEKREPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*_wtasmbld.report.txt"
        ]
    }

    withName: KREPORT2KRONA_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRAKEN2_BH_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*_summary.txt"
        ]
    }
}


///////////////////////////////////////
//
// Subworkflow: generating pipeline stats
//
///////////////////////////////////////


process {

    withName: GENERATE_PIPELINE_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_EXQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

}
