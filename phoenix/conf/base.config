/*
========================================================================================
    cdcgov/phoenix Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // The defaults for all processes
    cpus   = { check_max( 6    * task.attempt, 'cpus'   ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_low {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 1.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h                 , 'time'    ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) } 
        time   = { check_max( 4.h                 , 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTP_SINGLES {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTP {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 5.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:FASTQCTRIMD {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:BBDUK {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 14.GB * task.attempt, 'memory'  ) } //needs min 14GB for bbduk
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:BBMAP_REFORMAT {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 11.GB  * task.attempt, 'memory'  ) } // minimum of 11GB required
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:KRAKEN2_KRAKEN2 {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:SPADES {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:'SRST2_AR|SRST2_MLST' {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:PROKKA {
        cpus   = { check_max( 6                   , 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:AMRFINDERPLUS_RUN {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 3.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:BUSCO {
        cpus   = { check_max( 8                   , 'cpus'    ) }
        memory = { check_max( 45.GB * task.attempt, 'memory'  ) } // works for 90% retry got the rest.
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:'GAMMA|GAMMAS' {
        cpus   = { check_max( 3                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withName:MULTIQC {
        cpus   = { check_max( 1                   , 'cpus'    ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h                 , 'time'    ) }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

}
