manifest {
    name            = 'cdcgov/phoenix'
    author          = 'Maria Diaz, Nicholas Vlachos, Rich Stanton, Alyssa Kent, Jill Hagey'
    homePage        = 'https://github.com/CDCgov/phoenix'
    description     = 'PHoeNIx: A short-read pipeline for healthcare-associated and antimicrobial resistant pathogens'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.1.0'
    defaultBranch   = 'main'
}
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    pod = [
        annotation: 'scheduler.illumina.com/presetSize',
        value: 'himem-small'
    ]    
    cpus = 7
    memory = '60 GB'
    maxForks =  5
    maxRetries = 3
    errorStrategy = { sleep(task.attempt * 60000 as long); return 'retry' } // Retry with increasing delay
}
	 process {
		 withLabel:process_low  {
			 cpus = {  check_max( 1 , 'cpus' )  }
			 memory = {  check_max( 1.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 4.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
		}

	}

	 process {
		 withLabel:process_medium  {
			 cpus = {  check_max( 4 , 'cpus' )  }
			 memory = {  check_max( 10.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 4.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withLabel:process_high  {
			 cpus = {  check_max( 6 , 'cpus' )  }
			 memory = {  check_max( 10.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withName:FASTP_SINGLES  {
			 cpus = {  check_max( 2 , 'cpus' )  }
			 memory = {  check_max( 3.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:FASTP  {
			 cpus = {  check_max( 2 , 'cpus' )  }
			 memory = {  check_max( 5.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:FASTQCTRIMD  {
			 cpus = {  check_max( 2 , 'cpus' )  }
			 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:BBDUK  {
			 cpus = {  check_max( 4 , 'cpus' )  }
			 memory = {  check_max( 14.GB * task.attempt, 'memory' ) } // needs min 14GB for bbduk
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withName:BBMAP_REFORMAT  {
			 cpus = {  check_max( 2 , 'cpus' )  }
			 memory = {  check_max( 11.GB * task.attempt, 'memory' ) } // minimum of 11GB required
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:KRAKEN2_KRAKEN2  {
			 cpus = {  check_max( 2 , 'cpus' )  }
			 memory = {  check_max( 10.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:SPADES  {
			 cpus = {  check_max( 4 , 'cpus' )  }
			 memory = {  check_max( 12.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withName:'SRST2_AR|SRST2_MLST'  {
			 cpus = {  check_max( 6 , 'cpus' )  }
			 memory = {  check_max( 5.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withName:PROKKA  {
			 cpus = {  check_max( 6 , 'cpus' )  }
			 memory = {  check_max( 40.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
		}

	}

	 process {
		 withName:AMRFINDERPLUS_RUN  {
			 cpus = {  check_max( 4 , 'cpus' )  }
			 memory = {  check_max( 3.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
		}

	}

	 process {
		 withName:BUSCO  {
			 cpus = {  check_max( 8 , 'cpus' )  }
			 memory = {  check_max( 45.GB * task.attempt, 'memory' ) } // works for 90% retry got the rest.
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
		}

	}

	 process {
		 withName:'GAMMA|GAMMAS'  {
			 cpus = {  check_max( 3 , 'cpus' )  }
			 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
		}

	}

	 process {
		 withName:MULTIQC  {
			 cpus = {  check_max( 1 , 'cpus' )  }
			 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
			 time = {  check_max( 8.h , 'time' )  }
			 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
		}

	}

	 process {
		 withLabel:error_ignore  {
			 errorStrategy = { 'ignore' }
		}

	}

	 process {
		 withLabel:error_retry  {
			 errorStrategy = { 'retry' }
			 maxRetries = { 2 }
		}

	}

	 process {
		 withName:CUSTOM_DUMPSOFTWAREVERSIONS  {
			 cache = { false }
		}

	}

